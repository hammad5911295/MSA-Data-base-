# MSA SimDatabase 2024 - Complete Web Dashboard

Here's a fully functional SIM database dashboard with a modern interface, proper authentication, and all CRUD operations. The design features a clean layout with the MSA_SimDatabase branding.

## Project Structure

```
MSA_SimDatabase/
├── app.py
├── requirements.txt
├── static/
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── script.js
├── templates/
│   ├── base.html
│   ├── dashboard.html
│   ├── login.html
│   ├── add_sim.html
│   ├── edit_sim.html
│   └── view_sim.html
└── instance/
    └── sim_database.db
```

## Complete Code

### 1. app.py (Backend)

```python
from flask import Flask, render_template, request, redirect, url_for, session, flash
import sqlite3
from datetime import datetime
import hashlib
import os
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__, instance_relative_config=True)
app.secret_key = 'your-secret-key-123'  # Change this in production
app.config['DATABASE'] = os.path.join(app.instance_path, 'sim_database.db')

# Ensure instance folder exists
try:
    os.makedirs(app.instance_path)
except OSError:
    pass

def get_db():
    db = sqlite3.connect(app.config['DATABASE'])
    db.row_factory = sqlite3.Row
    return db

def init_db():
    with app.app_context():
        db = get_db()
        
        # Create tables
        db.execute('''
        CREATE TABLE IF NOT EXISTS sim_cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            imei TEXT UNIQUE NOT NULL,
            imsi TEXT UNIQUE NOT NULL,
            phone_number TEXT UNIQUE,
            carrier TEXT NOT NULL,
            issue_date TEXT NOT NULL,
            expiry_date TEXT,
            status TEXT CHECK(status IN ('active', 'inactive', 'suspended', 'lost')) NOT NULL DEFAULT 'active',
            owner_name TEXT,
            owner_id TEXT,
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL
        )
        ''')
        
        db.execute('''
        CREATE TABLE IF NOT EXISTS usage_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            sim_id INTEGER NOT NULL,
            data_used_mb REAL DEFAULT 0,
            call_duration_minutes REAL DEFAULT 0,
            sms_sent INTEGER DEFAULT 0,
            date TEXT NOT NULL,
            FOREIGN KEY (sim_id) REFERENCES sim_cards (id) ON DELETE CASCADE
        )
        ''')
        
        db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            role TEXT CHECK(role IN ('admin', 'operator', 'viewer')) NOT NULL DEFAULT 'viewer',
            created_at TEXT NOT NULL,
            last_login TEXT
        )
        ''')
        
        # Create default admin if not exists
        admin = db.execute('SELECT 1 FROM users WHERE username = "admin"').fetchone()
        if not admin:
            db.execute('''
            INSERT INTO users (username, password_hash, role, created_at)
            VALUES (?, ?, ?, ?)
            ''', (
                'admin',
                generate_password_hash('admin123'),
                'admin',
                datetime.now().isoformat()
            ))
        
        db.commit()

# Authentication decorator
def login_required(role='viewer'):
    def wrapper(f):
        def decorated_function(*args, **kwargs):
            if 'username' not in session:
                return redirect(url_for('login', next=request.url))
            
            user_role = session.get('role', 'viewer')
            role_hierarchy = ['viewer', 'operator', 'admin']
            if role_hierarchy.index(user_role) < role_hierarchy.index(role):
                flash('You do not have permission to access this page', 'danger')
                return redirect(url_for('dashboard'))
            
            return f(*args, **kwargs)
        return decorated_function
    return wrapper

@app.route('/')
def index():
    if 'username' in session:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        db = get_db()
        user = db.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
        
        if user and check_password_hash(user['password_hash'], password):
            session['username'] = user['username']
            session['role'] = user['role']
            
            # Update last login
            db.execute('UPDATE users SET last_login = ? WHERE id = ?', 
                      (datetime.now().isoformat(), user['id']))
            db.commit()
            
            flash('Login successful!', 'success')
            return redirect(url_for('dashboard'))
        else:
            flash('Invalid username or password', 'danger')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.clear()
    flash('You have been logged out', 'info')
    return redirect(url_for('login'))

@app.route('/dashboard')
@login_required()
def dashboard():
    db = get_db()
    
    # Get stats
    total_sims = db.execute('SELECT COUNT(*) FROM sim_cards').fetchone()[0]
    active_sims = db.execute('SELECT COUNT(*) FROM sim_cards WHERE status = "active"').fetchone()[0]
    
    # Recent SIMs
    recent_sims = db.execute('''
    SELECT * FROM sim_cards 
    ORDER BY created_at DESC 
    LIMIT 5
    ''').fetchall()
    
    return render_template('dashboard.html', 
                         total_sims=total_sims,
                         active_sims=active_sims,
                         recent_sims=recent_sims)

@app.route('/sims')
@login_required()
def list_sims():
    db = get_db()
    search = request.args.get('search', '')
    
    query = 'SELECT * FROM sim_cards'
    params = []
    
    if search:
        query += ''' WHERE imei LIKE ? OR imsi LIKE ? OR phone_number LIKE ? 
                  OR owner_name LIKE ? OR carrier LIKE ?'''
        search_param = f'%{search}%'
        params = [search_param] * 5
    
    query += ' ORDER BY created_at DESC'
    sims = db.execute(query, params).fetchall()
    
    return render_template('sims/list.html', sims=sims, search=search)

@app.route('/sims/add', methods=['GET', 'POST'])
@login_required('operator')
def add_sim():
    if request.method == 'POST':
        imei = request.form['imei']
        imsi = request.form['imsi']
        phone_number = request.form.get('phone_number')
        carrier = request.form['carrier']
        issue_date = request.form['issue_date']
        expiry_date = request.form.get('expiry_date')
        status = request.form.get('status', 'active')
        owner_name = request.form.get('owner_name')
        owner_id = request.form.get('owner_id')
        
        current_time = datetime.now().isoformat()
        
        try:
            db = get_db()
            db.execute('''
            INSERT INTO sim_cards 
            (imei, imsi, phone_number, carrier, issue_date, expiry_date, 
             status, owner_name, owner_id, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                imei, imsi, phone_number, carrier, issue_date, expiry_date,
                status, owner_name, owner_id, current_time, current_time
            ))
            db.commit()
            
            flash('SIM card added successfully!', 'success')
            return redirect(url_for('list_sims'))
        except sqlite3.IntegrityError as e:
            flash(f'Error adding SIM: {str(e)}', 'danger')
    
    return render_template('sims/add.html')

@app.route('/sims/<int:sim_id>')
@login_required()
def view_sim(sim_id):
    db = get_db()
    sim = db.execute('SELECT * FROM sim_cards WHERE id = ?', (sim_id,)).fetchone()
    
    if not sim:
        flash('SIM card not found', 'danger')
        return redirect(url_for('list_sims'))
    
    usage_data = db.execute('''
    SELECT * FROM usage_data 
    WHERE sim_id = ? 
    ORDER BY date DESC
    ''', (sim_id,)).fetchall()
    
    return render_template('sims/view.html', sim=sim, usage_data=usage_data)

@app.route('/sims/<int:sim_id>/edit', methods=['GET', 'POST'])
@login_required('operator')
def edit_sim(sim_id):
    db = get_db()
    sim = db.execute('SELECT * FROM sim_cards WHERE id = ?', (sim_id,)).fetchone()
    
    if not sim:
        flash('SIM card not found', 'danger')
        return redirect(url_for('list_sims'))
    
    if request.method == 'POST':
        phone_number = request.form.get('phone_number')
        carrier = request.form['carrier']
        expiry_date = request.form.get('expiry_date')
        status = request.form.get('status', 'active')
        owner_name = request.form.get('owner_name')
        owner_id = request.form.get('owner_id')
        
        try:
            db.execute('''
            UPDATE sim_cards 
            SET phone_number = ?, carrier = ?, expiry_date = ?, 
                status = ?, owner_name = ?, owner_id = ?, updated_at = ?
            WHERE id = ?
            ''', (
                phone_number, carrier, expiry_date,
                status, owner_name, owner_id, datetime.now().isoformat(),
                sim_id
            ))
            db.commit()
            
            flash('SIM card updated successfully!', 'success')
            return redirect(url_for('view_sim
